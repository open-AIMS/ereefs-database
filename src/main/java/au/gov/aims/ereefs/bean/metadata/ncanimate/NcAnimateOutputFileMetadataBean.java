/*
 * Copyright (c) Australian Institute of Marine Science, 2021.
 * @author Gael Lafond <g.lafond@aims.gov.au>
 */
package au.gov.aims.ereefs.bean.metadata.ncanimate;

import au.gov.aims.ereefs.bean.AbstractBean;
import au.gov.aims.ereefs.bean.metadata.TimeIncrement;
import au.gov.aims.ereefs.bean.metadata.netcdf.NetCDFMetadataBean;
import au.gov.aims.ereefs.bean.ncanimate.NcAnimateRegionBean;
import au.gov.aims.ereefs.database.manager.MetadataManager;
import au.gov.aims.json.JSONWrapperObject;
import org.apache.log4j.Logger;
import org.joda.time.DateTime;
import org.json.JSONArray;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * This is a bean, used with the {@code ereefs-ncanimate2} project.
 * It represent the documents found in the MongoDB collection {@code metadata}
 * with {@code type=NCANIMATE_PRODUCT}.
 * It's describing a set of output files generated by {@code ereefs-ncanimate2};
 * each of which can be either a video file or a static map file.
 */
public class NcAnimateOutputFileMetadataBean extends AbstractBean {
    private static final Logger LOGGER = Logger.getLogger(NcAnimateOutputFileMetadataBean.class);

    private String id;
    private String definitionId; // ncAnimateConfigId
    private String datasetId;

    // Always set to "NCANIMATE_PRODUCT"
    private MetadataManager.MetadataType type;

    // Should always be "VALID"
    private NetCDFMetadataBean.Status status;

    // The location of the master copy of the files (S3 or file system)
    // NOTE: There might be multiple files representing the output (mp4, wmv, etc)
    // Key: File ID
    private Map<String, NcAnimateOutputFileBean> outputFiles;

    private List<NcAnimateInputFileBean> inputFiles;

    private DateTime lastModified; // last modified timestamp of the generated file(s)

    // Date range representing the output files.
    // For example, a monthly video would have something like:
    private DateTime startDate;
    private DateTime endDate;

    // Where the video frames are stored
    private String frameDirectoryUrl;

    // Time increments: 1 hour, 1 month, 1 year, etc
    private TimeIncrement videoTimeIncrement;
    private TimeIncrement mapTimeIncrement;
    private TimeIncrement frameTimeIncrement;

    private String preview; // Used with videos

    private Double targetHeight;

    private NcAnimateRegionBean region;

    private JSONObject properties;

    /**
     * Empty constructor. Use setters to set attributes.
     */
    public NcAnimateOutputFileMetadataBean() {}

    /**
     * Construct a {@code NcAnimateOutputFileMetadataBean} from a {@code JSONObject} object.
     * Used when parsing the metadata JSON document retrieved from the database.
     * @param json JSON serialised NcAnimateOutputFileMetadataBean.
     */
    public NcAnimateOutputFileMetadataBean(JSONObject json) throws Exception {
        if (json == null) {
            throw new IllegalArgumentException("JSONObject parameter is null.");
        }

        this.id = json.optString("_id", null);
        this.definitionId = json.optString("definitionId", null);
        this.datasetId = json.optString("datasetId", null);
        this.type = this.toMetadataType(json.optString("type", null));
        this.status = this.toStatus(json.optString("status", null));

        this.outputFiles = this.toOutputFileMap(json.optJSONObject("outputFiles"));
        this.inputFiles = this.toInputFileList(json.optJSONArray("inputFiles"));

        this.lastModified = this.toDateTime("lastModified", json.optString("lastModified", null));

        JSONObject jsonDateRange = json.optJSONObject("dateRange");
        if (jsonDateRange != null) {
            this.startDate = this.toDateTime("startDate", jsonDateRange.optString("startDate", null));
            this.endDate = this.toDateTime("endDate", jsonDateRange.optString("endDate", null));
        }

        this.frameDirectoryUrl = json.optString("frameDirectoryUrl", null);

        this.videoTimeIncrement = this.toTimeIncrement(json.optJSONObject("videoTimeIncrement"));
        this.mapTimeIncrement = this.toTimeIncrement(json.optJSONObject("mapTimeIncrement"));
        this.frameTimeIncrement = this.toTimeIncrement(json.optJSONObject("frameTimeIncrement"));

        this.preview = json.optString("preview", null);

        if (json.has("targetHeight")) {
            this.targetHeight = json.optDouble("targetHeight", 0);
        }

        this.region = new NcAnimateRegionBean(new JSONWrapperObject(json.optJSONObject("region")));

        this.properties = json.optJSONObject("properties");
    }

    private MetadataManager.MetadataType toMetadataType(String typeStr) {
        if (typeStr == null || typeStr.isEmpty()) {
            return null;
        }

        return MetadataManager.MetadataType.valueOf(typeStr);
    }

    private NetCDFMetadataBean.Status toStatus(String statusStr) {
        if (statusStr == null || statusStr.isEmpty()) {
            return null;
        }

        return NetCDFMetadataBean.Status.valueOf(statusStr);
    }

    private Map<String, NcAnimateOutputFileBean> toOutputFileMap(JSONObject json) {
        if (json == null) {
            return null;
        }

        Map<String, NcAnimateOutputFileBean> _outputFiles =
                new HashMap<String, NcAnimateOutputFileBean>();

        for (String outputFileId : json.keySet()) {
            JSONObject jsonOutputFile = json.optJSONObject(outputFileId);
            NcAnimateOutputFileBean outputFile = new NcAnimateOutputFileBean(jsonOutputFile);
            if (outputFile != null) {
                _outputFiles.put(outputFileId, outputFile);
            }
        }

        return _outputFiles.isEmpty() ? null : _outputFiles;
    }

    private List<NcAnimateInputFileBean> toInputFileList(JSONArray json) {
        if (json == null) {
            return null;
        }

        List<NcAnimateInputFileBean> _inputFiles =
                new ArrayList<NcAnimateInputFileBean>();

        for (int i=0; i<json.length(); i++) {
            JSONObject jsonInputFile = json.optJSONObject(i);
            NcAnimateInputFileBean inputFile = new NcAnimateInputFileBean(jsonInputFile);
            if (inputFile != null) {
                _inputFiles.add(inputFile);
            }
        }

        return _inputFiles.isEmpty() ? null : _inputFiles;
    }

    private DateTime toDateTime(String fieldName, String dateTimeStr) {
        if (dateTimeStr == null || dateTimeStr.isEmpty()) {
            return null;
        }

        // If the String is a long
        try {
            long dateTimeLong = Long.parseLong(dateTimeStr);
            if (dateTimeStr.equals("" + dateTimeLong)) {
                return new DateTime(dateTimeLong);
            }
        } catch(Exception ex) {
            LOGGER.debug(String.format("Date field %s for %s is not a long: %s",
                    fieldName, this.id, dateTimeStr));
        }

        try {
            return DateTime.parse(dateTimeStr);
        } catch(Exception ex) {
            LOGGER.warn(String.format("Invalid %s for %s: %s",
                    fieldName, this.id, dateTimeStr));
        }

        return null;
    }

    private TimeIncrement toTimeIncrement(JSONObject json) {
        if (json == null) {
            return null;
        }

        return new TimeIncrement(json);
    }


    /**
     * Returns the {@code NcAnimateOutputFileMetadataBean} ID.
     *
     * <p>Example: {@code gbr4_v2_temp-wind-salt-current/gbr4_v2_temp-wind-salt-current_map_hourly_2010-09-01_00h00_qld_-1_5}</p>
     *
     * @return the {@code NcAnimateOutputFileMetadataBean} ID.
     */
    public String getId() {
        return this.id;
    }

    /**
     * Set the {@code NcAnimateOutputFileMetadataBean} ID.
     *
     * <p>Example: {@code gbr4_v2_temp-wind-salt-current/gbr4_v2_temp-wind-salt-current_map_hourly_2010-09-01_00h00_qld_-1_5}</p>
     *
     * @param id the {@code NcAnimateOutputFileMetadataBean} ID.
     */
    public void setId(String id) {
        this.id = id;
    }

    /**
     * Returns the {@code NcAnimateOutputFileMetadataBean} definition ID.
     *
     * <p>Example: {@code gbr4_v2_temp-wind-salt-current}</p>
     *
     * @return the {@code NcAnimateOutputFileMetadataBean} definition ID.
     */
    public String getDefinitionId() {
        return this.definitionId;
    }

    /**
     * Set the {@code NcAnimateOutputFileMetadataBean} definition ID.
     *
     * <p>Example: {@code gbr4_v2_temp-wind-salt-current}</p>
     *
     * @param definitionId the {@code NcAnimateOutputFileMetadataBean} definition ID.
     */
    public void setDefinitionId(String definitionId) {
        this.definitionId = definitionId;
    }

    /**
     * Returns the {@code NcAnimateOutputFileMetadataBean} dataset ID.
     *
     * <p>Example: {@code gbr4_v2_temp-wind-salt-current_map_hourly_2010-09-01_00h00_qld_-1.5}</p>
     *
     * @return the {@code NcAnimateOutputFileMetadataBean} dataset ID.
     */
    public String getDatasetId() {
        return this.datasetId;
    }

    /**
     * Set the {@code NcAnimateOutputFileMetadataBean} dataset ID.
     *
     * <p>Example: {@code gbr4_v2_temp-wind-salt-current_map_hourly_2010-09-01_00h00_qld_-1.5}</p>
     *
     * @param datasetId the {@code NcAnimateOutputFileMetadataBean} dataset ID.
     */
    public void setDatasetId(String datasetId) {
        this.datasetId = datasetId;
    }

    /**
     * Returns the {@code NcAnimateOutputFileMetadataBean} type.
     * Should always be set to {@code NCANIMATE_PRODUCT}.
     *
     * @return the {@code NcAnimateOutputFileMetadataBean} type.
     */
    public MetadataManager.MetadataType getType() {
        return this.type;
    }

    /**
     * Set the {@code NcAnimateOutputFileMetadataBean} type.
     * Should always be set to {@code NCANIMATE_PRODUCT}.
     *
     * @param type the {@code NcAnimateOutputFileMetadataBean} type.
     */
    public void setType(MetadataManager.MetadataType type) {
        this.type = type;
    }

    /**
     * Returns the {@code NcAnimateOutputFileMetadataBean} status.
     * Should always be set to {@code VALID}.
     *
     * @return the {@code NcAnimateOutputFileMetadataBean} status.
     */
    public NetCDFMetadataBean.Status getStatus() {
        return this.status;
    }

    /**
     * Set the {@code NcAnimateOutputFileMetadataBean} status.
     * Should always be set to {@code VALID}.
     *
     * @param status the {@code NcAnimateOutputFileMetadataBean} status.
     */
    public void setStatus(NetCDFMetadataBean.Status status) {
        this.status = status;
    }

    /**
     * Returns the {@code Map} of {@code NcAnimateOutputFileBean}.
     * A {@code NcAnimateOutputFileMetadataBean} may be associated with
     * multiple derivatives of the output file.
     * For example: {@code PNG, SVG, GIF}.
     *
     * @return the {@code Map} of {@code NcAnimateOutputFileBean}.
     */
    public Map<String, NcAnimateOutputFileBean> getOutputFiles() {
        return this.outputFiles;
    }

    /**
     * Set the {@code Map} of {@code NcAnimateOutputFileBean}.
     * @param outputFiles the {@code Map} of {@code NcAnimateOutputFileBean}.
     */
    public void setOutputFiles(Map<String, NcAnimateOutputFileBean> outputFiles) {
        this.outputFiles = outputFiles;
    }

    /**
     * Add a {@code NcAnimateOutputFileBean}.
     * @param outputFileId the output file ID.
     * @param outputFileBean the output file object.
     */
    public void addOutputFile(String outputFileId, NcAnimateOutputFileBean outputFileBean) {
        if (outputFileId != null && outputFileBean != null) {
            if (this.outputFiles == null) {
                this.outputFiles = new HashMap<String, NcAnimateOutputFileBean>();
            }

            this.outputFiles.put(outputFileId, outputFileBean);
        }
    }

    /**
     * Returns the {@code List} of {@code NcAnimateInputFileBean}.
     * The list of NetCDF files or GRIB files that were used to generate the output files.
     *
     * @return the {@code List} of {@code NcAnimateInputFileBean}.
     */
    public List<NcAnimateInputFileBean> getInputFiles() {
        return this.inputFiles;
    }

    /**
     * Set the {@code List} of {@code NcAnimateInputFileBean}.
     * The list of NetCDF files or GRIB files that were used to generate the output files.
     *
     * @param inputFiles the {@code List} of {@code NcAnimateInputFileBean}.
     */
    public void setInputFiles(List<NcAnimateInputFileBean> inputFiles) {
        this.inputFiles = inputFiles;
    }

    /**
     * Add a {@code NcAnimateInputFileBean}.
     * @param inputFile the input file object.
     */
    public void addInputFile(NcAnimateInputFileBean inputFile) {
        if (inputFile != null) {
            if (this.inputFiles == null) {
                this.inputFiles = new ArrayList<NcAnimateInputFileBean>();
            }

            this.inputFiles.add(inputFile);
        }
    }

    /**
     * Returns the {@code NcAnimateOutputFileMetadataBean} last modified timestamp.
     * The timestamp at which the metadata was created or last modified.
     *
     * @return the {@code NcAnimateOutputFileMetadataBean} last modified timestamp.
     */
    public DateTime getLastModified() {
        return this.lastModified;
    }

    /**
     * Set the {@code NcAnimateOutputFileMetadataBean} last modified timestamp.
     * The timestamp at which the metadata was created or last modified.
     *
     * @param lastModified the {@code NcAnimateOutputFileMetadataBean} last modified timestamp.
     */
    public void setLastModified(DateTime lastModified) {
        this.lastModified = lastModified;
    }

    /**
     * Returns the output file start date.
     * The output files are a representation of a period of time taken from the input file data.
     * The start date is the {@code DateTime} representing the start of that period (inclusive).
     *
     * @return the output file start date.
     */
    public DateTime getStartDate() {
        return this.startDate;
    }

    /**
     * Set the output file start date.
     * The output files are a representation of a period of time taken from the input file data.
     * The start date is the {@code DateTime} representing the start of that period (inclusive).
     *
     * @param startDate the output file start date.
     */
    public void setStartDate(DateTime startDate) {
        this.startDate = startDate;
    }

    /**
     * Returns the output file end date.
     * The output files are a representation of a period of time taken from the input file data.
     * The end date is the {@code DateTime} representing the end of that period (not inclusive).
     *
     * @return the output file end date.
     */
    public DateTime getEndDate() {
        return this.endDate;
    }

    /**
     * Set the output file end date.
     * The output files are a representation of a period of time taken from the input file data.
     * The end date is the {@code DateTime} representing the end of that period (not inclusive).
     *
     * @param endDate the output file end date.
     */
    public void setEndDate(DateTime endDate) {
        this.endDate = endDate;
    }

    /**
     * Returns the URL of the directory where the individual video frames can be found.
     * @return the frame directory URL.
     */
    public String getFrameDirectoryUrl() {
        return this.frameDirectoryUrl;
    }

    /**
     * Set the URL of the directory where the individual video frames can be found.
     * @param frameDirectoryUrl the frame directory URL.
     */
    public void setFrameDirectoryUrl(String frameDirectoryUrl) {
        this.frameDirectoryUrl = frameDirectoryUrl;
    }

    /**
     * Returns the period of time represented by the video output files.
     * @return the video time increment.
     */
    public TimeIncrement getVideoTimeIncrement() {
        return this.videoTimeIncrement;
    }

    /**
     * Set the period of time represented by the video output files.
     * @param videoTimeIncrement the video time increment.
     */
    public void setVideoTimeIncrement(TimeIncrement videoTimeIncrement) {
        this.videoTimeIncrement = videoTimeIncrement;
    }

    /**
     * Returns the period of time represented by the map output files.
     * @return the map time increment.
     */
    public TimeIncrement getMapTimeIncrement() {
        return this.mapTimeIncrement;
    }

    /**
     * Set the period of time represented by the map output files.
     * @param mapTimeIncrement the map time increment.
     */
    public void setMapTimeIncrement(TimeIncrement mapTimeIncrement) {
        this.mapTimeIncrement = mapTimeIncrement;
    }

    /**
     * Returns the period of time between each frame of the video output files.
     * In case of map file, this is the same as {@link #getMapTimeIncrement()}.
     *
     * @return the frame time increment.
     */
    public TimeIncrement getFrameTimeIncrement() {
        return this.frameTimeIncrement;
    }

    /**
     * Set the period of time between each frame of the video output files.
     * In case of map file, set this to the same value as {@link #setMapTimeIncrement(TimeIncrement)}.
     *
     * @param frameTimeIncrement the frame time increment.
     */
    public void setFrameTimeIncrement(TimeIncrement frameTimeIncrement) {
        this.frameTimeIncrement = frameTimeIncrement;
    }

    /**
     * Returns the URL of the video frame to use as a preview for the video.
     * Returns {@code null} for map files.
     *
     * @return the URL of the video frame to use as a preview for the video.
     */
    public String getPreview() {
        return this.preview;
    }

    /**
     * Set the URL of the video frame to use as a preview for the video.
     * Set to {@code null} for map files.
     *
     * @param preview the URL of the video frame to use as a preview for the video.
     */
    public void setPreview(String preview) {
        this.preview = preview;
    }

    /**
     * Height that was requested to generated the output files.
     * This may differ from the actual height used to generate the output files,
     * since the input files may not have the specified height available.
     *
     * @return the target height.
     */
    public Double getTargetHeight() {
        return this.targetHeight;
    }

    /**
     * Set the height that was requested to generated the output files.
     * This may differ from the actual height used to generate the output files,
     * since the input files may not have the specified height available.
     *
     * @param targetHeight the target height.
     */
    public void setTargetHeight(Double targetHeight) {
        this.targetHeight = targetHeight;
    }

    /**
     * Returns the region represented in the output files.
     * @return the output file region.
     */
    public NcAnimateRegionBean getRegion() {
        return this.region;
    }

    /**
     * Set the region represented in the output files.
     * @param region the output file region.
     */
    public void setRegion(NcAnimateRegionBean region) {
        this.region = region;
    }

    /**
     * Returns the properties that should be used to group output files on the website.
     *
     * <p>Example: {@code targetHeight}</p>
     *
     * @return the properties object.
     */
    public JSONObject getProperties() {
        return this.properties;
    }

    /**
     * Set the properties that should be used to group output files on the website.
     * @param properties the properties object.
     */
    public void setProperties(JSONObject properties) {
        this.properties = properties;
    }



    /**
     * Serialise the object into a {@code JSONObject}.
     * @return a {@code JSONObject} representing the object.
     */
    public JSONObject toJSON() {
        JSONObject json = new JSONObject();

        json.put("_id", this.getId());
        json.put("definitionId", this.definitionId);
        json.put("datasetId", this.datasetId);
        json.put("type", this.type);
        json.put("status", this.status);

        if (this.outputFiles != null) {
            JSONObject jsonOutputFiles = new JSONObject();
            for (Map.Entry<String, NcAnimateOutputFileBean> outputFileEntry : this.outputFiles.entrySet()) {
                String outputFileId = outputFileEntry.getKey();
                NcAnimateOutputFileBean outputFile = outputFileEntry.getValue();

                if (outputFile != null) {
                    jsonOutputFiles.put(outputFileId, outputFile.toJSON());
                }
            }
            json.put("outputFiles", jsonOutputFiles);
        }

        if (this.inputFiles != null) {
            JSONArray jsonInputFiles = new JSONArray();
            for (NcAnimateInputFileBean inputFile : this.inputFiles) {
                if (inputFile != null) {
                    jsonInputFiles.put(inputFile.toJSON());
                }
            }
            json.put("inputFiles", jsonInputFiles);
        }

        json.put("lastModified", this.lastModified);

        json.put("dateRange", new JSONObject()
            .put("startDate", this.startDate)
            .put("endDate", this.endDate));

        json.put("frameDirectoryUrl", this.frameDirectoryUrl);

        if (this.videoTimeIncrement != null) {
            json.put("videoTimeIncrement", this.videoTimeIncrement.toJSON());
        }
        if (this.mapTimeIncrement != null) {
            json.put("mapTimeIncrement", this.mapTimeIncrement.toJSON());
        }
        if (this.frameTimeIncrement != null) {
            json.put("frameTimeIncrement", this.frameTimeIncrement.toJSON());
        }

        json.put("preview", this.preview);
        json.put("targetHeight", this.targetHeight);

        if (this.region != null) {
            json.put("region", this.region.toJSON());
        }

        json.put("properties", this.properties);

        return json;
    }
}
